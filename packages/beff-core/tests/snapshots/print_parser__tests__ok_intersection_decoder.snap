---
source: packages/beff-core/tests/print_parser.rs
expression: "decoder(r#\"\n        export type Alias = {a:string} & {b:number}\n        parse.buildParsers<{ Dec: Alias }>();\n      \"#)"
snapshot_kind: text
---
function ValidateAlias(ctx, input) {
    return (hoisted_Alias_3.validateObjectValidator.bind(hoisted_Alias_3))(ctx, input);
}
function ParseAlias(ctx, input) {
    return (hoisted_Alias_4.parseObjectParser.bind(hoisted_Alias_4))(ctx, input);
}
function ReportAlias(ctx, input) {
    return (hoisted_Alias_5.reportObjectReporter.bind(hoisted_Alias_5))(ctx, input);
}
function SchemaAlias(ctx, input) {
    if (ctx.seen["Alias"]) {
        throw new Error("Failed to print schema. At Alias: circular reference in schema");
    }
    ctx.seen["Alias"] = true;
    var tmp = (hoisted_Alias_6.schemaObjectSchema.bind(hoisted_Alias_6))(ctx);
    delete ctx.seen["Alias"];
    return tmp;
}
const validators = {
    Alias: ValidateAlias
};
const parsers = {
    Alias: ParseAlias
};
const reporters = {
    Alias: ReportAlias
};
const schemas = {
    Alias: SchemaAlias
};
const hoisted_Alias_0 = {
    "a": validateString,
    "b": validateNumber
};
const hoisted_Alias_1 = {
    "a": schemaString,
    "b": schemaNumber
};
const hoisted_Alias_2 = null;
const hoisted_Alias_3 = new ObjectValidator(hoisted_Alias_0, hoisted_Alias_2);
const hoisted_Alias_4 = new ObjectParser({
    "a": parseIdentity,
    "b": parseIdentity
}, null);
const hoisted_Alias_5 = new ObjectReporter(hoisted_Alias_0, hoisted_Alias_2, {
    "a": reportString,
    "b": reportNumber
}, null);
const hoisted_Alias_6 = new ObjectSchema(hoisted_Alias_1, null);
