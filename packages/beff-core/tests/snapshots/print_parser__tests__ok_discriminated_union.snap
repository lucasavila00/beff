---
source: packages/beff-core/tests/print_parser.rs
expression: "decoder(r#\"\n        export type DiscriminatedUnion4 =\n            | {\n                type: \"a\";\n                a: {\n                  subType: \"a1\";\n                  a1: string;\n                };\n              }\n            | {\n                type: \"a\";\n                a: {\n                  subType: \"a2\";\n                  a2: string;\n                };\n              };\n        parse.buildParsers<{ DiscriminatedUnion4: DiscriminatedUnion4 }>();\n      \"#)"
---
function DecodeDiscriminatedUnion4(ctx, input) {
    return decodeAnyOfDiscriminated(ctx, input, "type", hoisted_DiscriminatedUnion4_5);
}
const validators = {
    DiscriminatedUnion4: DecodeDiscriminatedUnion4
};
const hoisted_DiscriminatedUnion4_0 = {
    "a1": (ctx, input)=>(decodeString(ctx, input)),
    "subType": (ctx, input)=>(decodeConst(ctx, input, "a1"))
};
const hoisted_DiscriminatedUnion4_1 = {
    "a": (ctx, input)=>(decodeObject(ctx, input, hoisted_DiscriminatedUnion4_0))
};
const hoisted_DiscriminatedUnion4_2 = {
    "a2": (ctx, input)=>(decodeString(ctx, input)),
    "subType": (ctx, input)=>(decodeConst(ctx, input, "a2"))
};
const hoisted_DiscriminatedUnion4_3 = {
    "a": (ctx, input)=>(decodeObject(ctx, input, hoisted_DiscriminatedUnion4_2))
};
const hoisted_DiscriminatedUnion4_4 = [
    (ctx, input)=>(decodeObject(ctx, input, hoisted_DiscriminatedUnion4_1)),
    (ctx, input)=>(decodeObject(ctx, input, hoisted_DiscriminatedUnion4_3))
];
const hoisted_DiscriminatedUnion4_5 = {
    "a": (ctx, input)=>(decodeAnyOf(ctx, input, hoisted_DiscriminatedUnion4_4))
};
