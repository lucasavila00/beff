---
source: packages/beff-core/tests/print_parser.rs
expression: "decoder(r#\"\n        export type Password = StringFormat<\"password\">;\n        export type PassLenghts = Record<Password, number>;\n        parse.buildParsers<{ PassLenghts: PassLenghts }>();\n      \"#)"
---
function ValidatePassLenghts(ctx, input) {
    return (hoisted_PassLenghts_3.validateMappedRecordValidator.bind(hoisted_PassLenghts_3))(ctx, input);
}
function ParsePassLenghts(ctx, input) {
    return (hoisted_PassLenghts_4.parseMappedRecordParser.bind(hoisted_PassLenghts_4))(ctx, input);
}
function ReportPassLenghts(ctx, input) {
    return (hoisted_PassLenghts_5.reportMappedRecordReporter.bind(hoisted_PassLenghts_5))(ctx, input);
}
function SchemaPassLenghts(ctx, input) {
    if (ctx.seen["PassLenghts"]) {
        return {};
    }
    ctx.seen["PassLenghts"] = true;
    var tmp = (hoisted_PassLenghts_6.schemaMappedRecordSchema.bind(hoisted_PassLenghts_6))(ctx);
    delete ctx.seen["PassLenghts"];
    return tmp;
}
function ValidatePassword(ctx, input) {
    return (hoisted_Password_0.validateStringWithFormatsDecoder.bind(hoisted_Password_0))(ctx, input);
}
function ParsePassword(ctx, input) {
    return (hoisted_Password_0.parseStringWithFormatsDecoder.bind(hoisted_Password_0))(ctx, input);
}
function ReportPassword(ctx, input) {
    return (hoisted_Password_0.reportStringWithFormatsDecoder.bind(hoisted_Password_0))(ctx, input);
}
function SchemaPassword(ctx, input) {
    if (ctx.seen["Password"]) {
        return {};
    }
    ctx.seen["Password"] = true;
    var tmp = (hoisted_Password_0.schemaStringWithFormatsDecoder.bind(hoisted_Password_0))(ctx);
    delete ctx.seen["Password"];
    return tmp;
}
const validators = {
    PassLenghts: ValidatePassLenghts,
    Password: ValidatePassword
};
const parsers = {
    PassLenghts: ParsePassLenghts,
    Password: ParsePassword
};
const reporters = {
    PassLenghts: ReportPassLenghts,
    Password: ReportPassword
};
const schemas = {
    PassLenghts: SchemaPassLenghts,
    Password: SchemaPassword
};
const hoisted_PassLenghts_0 = new StringWithFormatsDecoder("password");
const hoisted_PassLenghts_1 = hoisted_PassLenghts_0.validateStringWithFormatsDecoder.bind(hoisted_PassLenghts_0);
const hoisted_PassLenghts_2 = validateNumber;
const hoisted_PassLenghts_3 = new MappedRecordValidator(hoisted_PassLenghts_1, hoisted_PassLenghts_2);
const hoisted_PassLenghts_4 = new MappedRecordParser(hoisted_PassLenghts_0.parseStringWithFormatsDecoder.bind(hoisted_PassLenghts_0), parseIdentity);
const hoisted_PassLenghts_5 = new MappedRecordReporter(hoisted_PassLenghts_1, hoisted_PassLenghts_2, hoisted_PassLenghts_0.reportStringWithFormatsDecoder.bind(hoisted_PassLenghts_0), reportNumber);
const hoisted_PassLenghts_6 = new MappedRecordSchema(hoisted_PassLenghts_0.schemaStringWithFormatsDecoder.bind(hoisted_PassLenghts_0), schemaNumber);
const hoisted_Password_0 = new StringWithFormatsDecoder("password");
