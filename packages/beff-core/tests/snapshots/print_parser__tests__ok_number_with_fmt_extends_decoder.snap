---
source: packages/beff-core/tests/print_parser.rs
expression: "decoder(r#\"\n        export type NonInfiniteNumber = NumberFormat<\"NonInfiniteNumber\">;\n        export type NonNegativeNumber = NumberFormatExtends<NonInfiniteNumber, \"NonNegativeNumber\">;\n        export type Rate = NumberFormatExtends<NonNegativeNumber, \"Rate\">;\n        parse.buildParsers<{ NonInfiniteNumber: NonInfiniteNumber, NonNegativeNumber: NonNegativeNumber, Rate: Rate }>();\n      \"#)"
---
function ValidateNonInfiniteNumber(ctx, input) {
    return (hoisted_NonInfiniteNumber_0.validateNumberWithFormatsDecoder.bind(hoisted_NonInfiniteNumber_0))(ctx, input);
}
function ParseNonInfiniteNumber(ctx, input) {
    return (hoisted_NonInfiniteNumber_0.parseNumberWithFormatsDecoder.bind(hoisted_NonInfiniteNumber_0))(ctx, input);
}
function ReportNonInfiniteNumber(ctx, input) {
    return (hoisted_NonInfiniteNumber_0.reportNumberWithFormatsDecoder.bind(hoisted_NonInfiniteNumber_0))(ctx, input);
}
function SchemaNonInfiniteNumber(ctx, input) {
    if (ctx.seen["NonInfiniteNumber"]) {
        return {};
    }
    ctx.seen["NonInfiniteNumber"] = true;
    var tmp = (hoisted_NonInfiniteNumber_0.schemaNumberWithFormatsDecoder.bind(hoisted_NonInfiniteNumber_0))(ctx);
    delete ctx.seen["NonInfiniteNumber"];
    return tmp;
}
function ValidateNonNegativeNumber(ctx, input) {
    return (hoisted_NonNegativeNumber_0.validateNumberWithFormatsDecoder.bind(hoisted_NonNegativeNumber_0))(ctx, input);
}
function ParseNonNegativeNumber(ctx, input) {
    return (hoisted_NonNegativeNumber_0.parseNumberWithFormatsDecoder.bind(hoisted_NonNegativeNumber_0))(ctx, input);
}
function ReportNonNegativeNumber(ctx, input) {
    return (hoisted_NonNegativeNumber_0.reportNumberWithFormatsDecoder.bind(hoisted_NonNegativeNumber_0))(ctx, input);
}
function SchemaNonNegativeNumber(ctx, input) {
    if (ctx.seen["NonNegativeNumber"]) {
        return {};
    }
    ctx.seen["NonNegativeNumber"] = true;
    var tmp = (hoisted_NonNegativeNumber_0.schemaNumberWithFormatsDecoder.bind(hoisted_NonNegativeNumber_0))(ctx);
    delete ctx.seen["NonNegativeNumber"];
    return tmp;
}
function ValidateRate(ctx, input) {
    return (hoisted_Rate_0.validateNumberWithFormatsDecoder.bind(hoisted_Rate_0))(ctx, input);
}
function ParseRate(ctx, input) {
    return (hoisted_Rate_0.parseNumberWithFormatsDecoder.bind(hoisted_Rate_0))(ctx, input);
}
function ReportRate(ctx, input) {
    return (hoisted_Rate_0.reportNumberWithFormatsDecoder.bind(hoisted_Rate_0))(ctx, input);
}
function SchemaRate(ctx, input) {
    if (ctx.seen["Rate"]) {
        return {};
    }
    ctx.seen["Rate"] = true;
    var tmp = (hoisted_Rate_0.schemaNumberWithFormatsDecoder.bind(hoisted_Rate_0))(ctx);
    delete ctx.seen["Rate"];
    return tmp;
}
const validators = {
    NonInfiniteNumber: ValidateNonInfiniteNumber,
    NonNegativeNumber: ValidateNonNegativeNumber,
    Rate: ValidateRate
};
const parsers = {
    NonInfiniteNumber: ParseNonInfiniteNumber,
    NonNegativeNumber: ParseNonNegativeNumber,
    Rate: ParseRate
};
const reporters = {
    NonInfiniteNumber: ReportNonInfiniteNumber,
    NonNegativeNumber: ReportNonNegativeNumber,
    Rate: ReportRate
};
const schemas = {
    NonInfiniteNumber: SchemaNonInfiniteNumber,
    NonNegativeNumber: SchemaNonNegativeNumber,
    Rate: SchemaRate
};
const hoisted_NonInfiniteNumber_0 = new NumberWithFormatsDecoder("NonInfiniteNumber");
const hoisted_NonNegativeNumber_0 = new NumberWithFormatsDecoder("NonInfiniteNumber", "NonNegativeNumber");
const hoisted_Rate_0 = new NumberWithFormatsDecoder("NonInfiniteNumber", "NonNegativeNumber", "Rate");
